--- Slide 1 ---
파이썬 argparse 모듈 소개
파이썬에서 argparse 모듈은 명령줄 인터페이스(CLI)를 위한 강력한 도구입니다.
사용자가 스크립트에 인수를 전달하여 다양한 옵션과 매개변수를 지정할 수 있도록 도와줍니다.
by Taehoon Kee

--- Slide 2 ---
명령행 인자 처리의 필요성
프로그램 유연성 향상
사용자 입력을 통해 프로그램 동작 방식을 변경할 수 있습니다.
다양한 환경 및 데이터에 맞춰 프로그램을 조정할 수 있습니다.
반복적인 작업 자동화
동일한 작업을 수행할 때 매번 코드를 수정할 필요가 없습니다.
명령행 인자를 통해 다양한 입력 값을 제공하여 자동화할 수 있습니다.

--- Slide 3 ---
argparse 모듈의 주요 기능
명령행 인자 정의
프로그램 실행 시 사용할 인자를 정의하고, 각 인자의 이름, 타입, 설명 등을 지정합니다.
기본값 설정
인자가 입력되지 않을 경우 사용할 기본값을 지정하여 유연성을 높일 수 있습니다.
필수 인자 지정
프로그램 실행에 필수적인 인자를 지정하여 사용자가 반드시 입력하도록 할 수 있습니다.
데이터 타입 지정
인자의 데이터 타입을 명시하여 입력값의 유효성을 검증하고 오류를 방지합니다.

--- Slide 4 ---
명령행 인자 정의
인자 이름 지정
argparse를 사용하여 명령행 인자를 정의할 때 인자 이름을 명확하게 지정해야 합니다.
데이터 타입 지정
각 인자의 데이터 타입을 명시하여 예상되는 입력 형식을 명확히 합니다.
도움말 추가
각 인자에 대한 간략한 설명을 추가하여 사용자가 인자의 목적을 이해하도록 돕습니다.

--- Slide 5 ---
기본값 설정
기본값 지정
argparse를 사용하여 명령행 인자에 기본값을 설정할 수 있습니다. 이는 사용자가 인자를 제공하지 않을 경우 기본값을 사용하도록 합니다.
선택적 인자
기본값은 사용자가 인자를 제공하지 않을 때만 적용됩니다. 사용자가 인자를 제공하면 기본값은 무시됩니다.
코드 간결성
기본값 설정은 코드를 간결하게 만들고, 사용자에게 기본 동작을 제공합니다.

--- Slide 6 ---
필수 인자 지정
1
필수 인자
스크립트 실행에 반드시 필요한 인자입니다.
2
required=True
argparse.ArgumentParser 객체의 add_argument 메서드에 required=True 옵션을 설정하여 필수 인자를 지정합니다.
3
에러 처리
필수 인자를 제공하지 않고 스크립트를 실행하면 argparse 모듈은 에러 메시지를 출력하고 스크립트를 종료합니다.

--- Slide 7 ---
데이터 타입 지정
문자열
문자열 인자는 기본값입니다.
숫자
정수 또는 실수 인자를 지정할 수 있습니다.
리스트
여러 개의 값을 리스트로 입력 받습니다.
불리언
True 또는 False 값을 입력 받습니다.

--- Slide 8 ---
선택적 인자 생성
선택적 인자 추가
argparse 모듈은 프로그램 실행 시 추가적인 정보를 제공하기 위해 사용되는 선택적 인자를 정의할 수 있습니다.
선택적 인자는 '--' 기호로 시작하며, 인자 이름 뒤에 값을 지정하거나, 'True' 또는 'False'를 나타내는 플래그 형태로 사용될 수 있습니다.
예시 코드
parser.add_argument('--verbose', action='store_true', help='verbose output')
위 코드는 '--verbose'라는 선택적 인자를 추가하며, 이 인자가 사용되면 'verbose' 모드로 실행됩니다.

--- Slide 9 ---
간단한 argparse 활용 예제
1
모듈 임포트
argparse 모듈을 불러옵니다.
2
파서 생성
ArgumentParser 객체를 생성합니다.
3
인자 추가
add_argument() 메서드로 인자를 정의합니다.
4
파싱
parse_args() 메서드로 명령행 인자를 파싱합니다.
5
사용
파싱된 인자를 프로그램에서 사용합니다.
이 예제는 argparse 모듈을 사용하여 간단한 명령행 인자를 처리하는 방법을 보여줍니다. argparse 모듈은 다양한 인자 유형과 옵션을 지원하며, 명령행 인자를 쉽게 처리할 수 있도록 도와줍니다.

--- Slide 10 ---
간단한 argparse 활용 예제
입력 인자 정의
argparse.ArgumentParser 객체 생성 후 add_argument 메서드를 사용하여 인자를 정의합니다. 인자 이름, 데이터 타입, 기본값, 설명 등을 지정합니다.
파싱 및 사용
parser.parse_args() 메서드로 명령행 인자를 파싱하고, args. 속성을 사용하여 인자 값에 접근합니다.

--- Slide 11 ---
파싱 및 사용
파싱
argparse.parse_args() 메소드를 사용하여 명령행 인자를 파싱합니다.
속성 접근
파싱된 인자는 네임스페이스 객체에 저장되며, 속성처럼 접근하여 값을 사용할 수 있습니다.
값 활용
파싱된 인자를 사용하여 스크립트의 실행 로직을 제어하거나 필요한 작업을 수행합니다.

--- Slide 12 ---
복잡한 argparse 활용 예제
1
파일에 대한 처리
입력 파일 경로 지정
파일 읽기 및 처리
2
데이터 필터링
특정 조건에 맞는 데이터 선택
3
결과 출력
결과를 파일 또는 콘솔에 출력
복잡한 argparse 예제에서는 여러 인자를 사용하여 다양한 기능을 구현할 수 있습니다.
예를 들어, 파일 처리, 데이터 필터링, 결과 출력 등을 수행하는 스크립트를 작성할 수 있습니다.

--- Slide 13 ---
다중 명령어 처리
다중 명령어 처리
argparse는 여러 명령어를 처리하는 데 유용합니다. 각 명령어는 고유한 인자를 가지며 서로 독립적으로 작동합니다.
명령어 선택
사용자는 프로그램 실행 시 원하는 명령어를 선택할 수 있습니다. 이를 통해 다양한 기능을 제공하는 프로그램을 구축할 수 있습니다.
subparsers 모듈
argparse의 subparsers 모듈을 사용하면 각 명령어에 대한 인자를 정의할 수 있습니다.

--- Slide 14 ---
플래그 처리
1
플래그 추가
플래그는 '--' 기호로 시작하며 추가적인 정보를 제공합니다.
2
플래그 값 지정
플래그에 '=' 기호를 사용하여 값을 지정합니다.
3
Boolean 플래그
True/False 값을 나타내는 플래그를 사용할 수 있습니다.
4
짧은 플래그
'-' 기호를 사용하여 짧은 플래그를 사용할 수 있습니다.

--- Slide 15 ---
상호배타적 그룹
상호배타적 인자
argparse는 상호배타적인 인자 그룹을 정의할 수 있습니다.
그룹 지정
하나의 그룹 내에서 오직 하나의 인자만 선택할 수 있습니다.
예시
예를 들어, '--debug'와 '--verbose'는 동시에 사용할 수 없도록 설정할 수 있습니다.

--- Slide 16 ---
argparse를 통한 도움말 생성
1
자동 도움말 생성
argparse는 사용자가 명령행 인자에 대해 잘못된 입력을 제공하거나 도움말을 요청할 때 자동으로 도움말 정보를 생성합니다.
2
사용자 정의 도움말
argparse는 도움말 메시지의 내용을 사용자 정의할 수 있는 기능을 제공합니다.
3
도움말 메시지 구성
도움말 메시지는 사용자에게 필요한 정보를 제공하는 데 중요한 역할을 합니다.

--- Slide 17 ---
자동 도움말 생성
1
1. 기본 도움말
argparse 모듈은 기본적으로 간단한 도움말을 자동으로 생성합니다.
2
2. 명령어 설명 추가
add_argument() 메서드의 help 매개변수를 사용하여 각 인자에 대한 간략한 설명을 추가할 수 있습니다.
3
3. 포맷 지정
formatter_class 매개변수를 사용하여 도움말의 형식을 지정할 수 있습니다.
4
4. 사용자 정의
ArgumentParser 클래스의 epilog 속성을 사용하여 도움말의 끝에 추가적인 정보를 표시할 수 있습니다.

--- Slide 18 ---
사용자 정의 도움말
기본 도움말
argparse 모듈은 기본적으로 간결한 도움말을 제공합니다. 프로그램 이름, 인자 이름, 데이터 타입 등이 표시됩니다. 기본 도움말은 `-h` 옵션 또는 `--help` 옵션으로 출력됩니다.
사용자 정의 도움말
사용자 정의 도움말을 통해 프로그램의 기능과 사용법을 더욱 자세히 설명할 수 있습니다. `ArgumentParser` 객체의 `description` 속성에 프로그램 설명, `epilog` 속성에 추가 정보를 입력할 수 있습니다. `add_argument` 함수의 `help` 속성을 사용하면 인자에 대한 자세한 설명을 추가할 수 있습니다.

--- Slide 19 ---
argparse와 subparser를 활용한 대규모 프로그램
1
모듈 분리
각 기능을 별도의 모듈로 분리하여 코드 가독성 및 유지보수성을 높입니다.
2
subparser 활용
각 모듈에 대한 명령어를 subparser로 정의하고, 각 명령어에 필요한 인자를 정의합니다.
3
통합 실행
main 모듈에서 subparser를 통해 각 기능을 선택적으로 실행하고, 필요한 인자를 전달합니다.

--- Slide 20 ---
다양한 입력 데이터 타입 처리
문자열
argparse는 기본적으로 문자열을 처리합니다. 문자열 타입은 다양한 텍스트 입력을 받기에 유용합니다.
숫자
숫자 타입은 정수(int), 실수(float), 복소수(complex) 등 다양한 숫자 데이터를 처리합니다.
불리언
불리언 타입은 True 또는 False 값을 나타냅니다. 이를 통해 명령행 인자를 통해 프로그램 동작을 제어할 수 있습니다.
리스트
리스트 타입은 여러 개의 값을 입력 받아 처리할 수 있습니다. 각 값은 공백 또는 쉼표로 구분합니다.

--- Slide 21 ---
문자열
문자열 입력
argparse는 사용자로부터 문자열을 입력받을 수 있습니다.
변수 할당
입력된 문자열은 파이썬 변수에 저장됩니다.
주석 추가
문자열은 주석이나 출력 메시지에 사용될 수 있습니다.

--- Slide 22 ---
숫자 데이터 타입 처리
정수
argparse는 int 타입을 사용하여 정수 값을 받아 처리합니다.
실수
float 타입으로 실수 값을 입력받고 처리할 수 있습니다.
복소수
complex 타입으로 복소수 값을 받아 계산할 수 있습니다.

--- Slide 23 ---
불리언
1
True 또는 False
불리언 타입은 True 또는 False 값만을 나타냅니다.
2
조건문
조건문에서 참 또는 거짓을 판단하는 데 사용됩니다.
3
논리 연산
and, or, not 등 논리 연산자와 함께 사용됩니다.
4
예제
is_active = True

--- Slide 24 ---
리스트 데이터 타입 처리
리스트 인자 처리
argparse는 사용자가 여러 개의 값을 입력할 수 있도록 리스트 데이터 타입을 지원합니다. 리스트에 추가할 값을 공백으로 구분하여 입력할 수 있습니다.
리스트 형식 지정
argparse의 `type` 매개변수에 `list`를 사용하여 리스트 데이터 타입을 지정할 수 있으며, `nargs` 매개변수를 사용하여 입력할 값의 개수를 제한할 수 있습니다.
리스트 예시
예를 들어, `--numbers 1 2 3`와 같이 입력하면, `numbers` 인자에 `[1, 2, 3]` 리스트가 저장됩니다.

--- Slide 25 ---
argparse 활용 시 주의 사항
명령어 일관성 유지
명령어 이름과 인자는 일관성을 유지하는 것이 중요합니다. 이는 사용자가 프로그램을 쉽게 이해하고 사용할 수 있도록 돕습니다.
예를 들어, 모든 명령어에 동일한 형식을 사용하거나, 비슷한 기능을 가진 명령어는 비슷한 이름을 사용하는 것이 좋습니다.
명확한 설명 제공
각 인자에 대한 명확한 설명을 제공해야 합니다. 사용자가 각 인자가 무엇을 의미하는지 명확하게 이해할 수 있도록 설명을 추가하는 것이 중요합니다.
설명은 간결하고 명확하게 작성해야 하며, 가능하면 예시를 포함하는 것이 좋습니다.

--- Slide 26 ---
argparse 사용 예시 리뷰
1
간단한 계산기 스크립트
숫자 더하기, 빼기, 곱하기, 나누기
2
데이터 처리 스크립트
CSV 파일 읽고, 데이터 정렬, 분석
3
웹 크롤링 스크립트
특정 웹사이트에서 데이터 수집
4
머신 러닝 모델 훈련 스크립트
데이터셋 학습, 모델 평가, 예측
argparse를 이용하여 다양한 스크립트를 만들 수 있습니다. 간단한 계산기부터 복잡한 머신 러닝 모델 훈련까지 다양한 작업을 수행하는 스크립트를 제작할 수 있습니다.

--- Slide 27 ---
argparse 장단점 및 다른 모듈과의 비교
장점
명령행 인자 처리를 간편하게 해줍니다. 사용자 친화적인 도움말을 자동으로 생성합니다.
단점
복잡한 인자 처리 시 코드가 복잡해질 수 있습니다. 학습 곡선이 다소 높을 수 있습니다.
optparse
argparse보다 구식 모듈입니다. 기능이 제한적이며 사용이 더 복잡합니다.
docopt
Docstring 기반으로 명령행 인자를 처리합니다. 간결하고 직관적인 문법을 제공합니다.

--- Slide 28 ---
요약 및 결론
argparse 모듈은 명령행 인자를 효율적으로 처리할 수 있도록 도와줍니다.
명령행 인자를 명확하고 일관성 있게 정의하고, 사용자에게 필요한 도움말을 제공할 수 있습니다.

